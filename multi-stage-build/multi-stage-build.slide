Docker Multi Stage Build
O Milagre da otimização de imagens!
Tags: docker, containers

Pery Lemke
Site Reliability Engineer na Nuveo
pery.lemke@gmail.com
http://www.sudocast.com.br/
@perylemke
@sudocast

* $ whoami

- Pery Lemke mas pode me chamar de Pery mesmo!
- Host no SudoCast e no Test After Deploy;
- Membro da organização do meetup DevOps Floripa;
- Garimpeiro de bandas obscuras de Stoner e Prog Rock.

* Objetivo

* O que é Multi Stage Build?

- Feature da versão 17.05;
- Melhor manutenção;
- Dockerfiles mais limpos e claros.

* Imagem ilustrativa

.image img/multi-stage-build.png _ 1050

* “Talk is a cheap, show me a code!” - Linus Torvalds

* Exemplos

* Python

.code code/Dockerfile.python

* Java

.code code/Dockerfile.emjava

* Rust

Não perca a talk " Containers minimalistas em aplicações Rust" na Trilha de Rust no Sabádo ;)

* Case Nuveo

* Cenário

.code terminal/before_multi_stage.txt

* Desafio

- Otimizar as nossas imagens para que tenham o menor tamanho possível;

* Dockerfile sem Multi Stage Build

.code code/Dockerfile.nomultistage

* Caminhos a seguir

- Scratch
- Alpine

* Scratch

* O que é scratch?

- Imagem vazia;
- Extremamente minimalista.

* Multi Stage Build com scratch

.code code/Dockerfile.scratch

* Resultado

.code terminal/compare_scratch.txt

* Porém...

- Inicialmente pensamos em varíaveis de ambiente;
- Uma biblioteca usada por nós que faz uma chamada syscall que necessita de *libc*.

* Alpine

* O que é Alpine?

- Baseada em musl libc e BusyBox;
- Minimalista;
- 5MB.

* Multi Stage Build com Alpine

.code code/Dockerfile.alpine

* Resultado

.code terminal/compare_alpine.txt

* Bonus round

* Frontend

.code code/Dockerfile.frontend

* Frontend continuação...

.code code/Dockerfile.frontend2

* Com isso ganhamos...

- Economia de espaço de disco em nossas máquinas e servers;
- Tempo de pull reduziu pela metade;
- Time feliz. :)

* Dica

- Docker criará dangling images;
- Use *docker* *image* *prune* *-f*

* Conclusão

Se você utiliza Docker, recomendo fortemente estudar e aplicar o Multi Stage Build para otimizar as imagens de suas aplicações.

.image img/go-docker.png _ 850

* Dúvidas, Perguntas e/ou Adendos?

* Links úteis
.link https://docs.docker.com/develop/develop-images/multistage-build/ Documentação Oficial
.link https://medium.com/test-after-deploy/otimizando-suas-imagens-docker-com-multi-stage-build-a2271169af52 Otimizando suas imagens Docker com Multi Stage Build
.link https://www.mundodocker.com.br/docker-multi-stage-builds/ Mundo Docker
.link https://lekum.org/post/multistage-dockerfile/ Lighter Python images using multi-stage Dockerfiles
.link http://blog.arungupta.me/smaller-java-image-docker-multi-stage-build/ Creating Smaller Java Image using Docker Multi-stage Build